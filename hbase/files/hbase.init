#!/bin/bash
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Starts a Hadoop {{ hadoop_major }} {{ hadoop_svc }}
#
# chkconfig: 35 85 15
# description: Hadoop {{ hadoop_svc }}
#
### BEGIN INIT INFO
# Provides:          hadoop-{{ hadoop_user }}-{{ hadoop_svc }}
# Short-Description: Hadoop {{ hadoop_svc }}
# Default-Start:     3 5
# Default-Stop:      0 1 6
# Required-Start:    $syslog $remote_fs
# Required-Stop:     $syslog $remote_fs
# Should-Start:
# Should-Stop:
### END INIT INFO
{%- from 'hbase/settings.sls' import hbase with context %}

. /lib/lsb/init-functions
if [ -f /etc/default/hadoop ]; then
  . /etc/default/hadoop
fi

RETVAL_SUCCESS=0

RETVAL=0
SLEEP_TIME=5
PROC_NAME="java"
EXEC_PATH="/usr/lib/hbase/bin"
SVC_USER="{{ hbase.username }}"
DESC="hbase"

start() {
  log_success_msg "Starting ${DESC}: "
  su -s /bin/bash $SVC_USER -c "$EXEC_PATH/start-hbase.sh"
  # Some processes are slow to start
  sleep $SLEEP_TIME
  checkstatusofproc
  RETVAL=$?

  return $RETVAL
}

stop() {
  log_success_msg "Stopping ${DESC}: "
  su -s /bin/bash $SVC_USER -c "$EXEC_PATH/stop-hbase.sh"
  RETVAL=$?
  return $RETVAL
}

restart() {
  stop
  start
}

checkstatusofproc(){
  su -s /bin/bash $SVC_USER -c "/usr/lib/java/bin/jps | grep HMaster"
  RETVAL=$?
  return $RETVAL
}

checkstatus(){
  checkstatusofproc
  status=$?

  case "$status" in
    0)
      log_success_msg "${DESC} is running"
      ;;
    1)
      log_failure_msg "${DESC} is not running"
      ;;
    *)
      log_failure_msg "${DESC} status is unknown"
      ;;
  esac
  return $status
}

condrestart(){
  [ -e $LOCKFILE ] && restart || :
}

check_for_root() {
  if [ $(id -ur) -ne 0 ]; then
    echo 'Error: root user required'
    echo
    exit 1
  fi
}

service() {
  case "$1" in
    start)
      check_for_root
      start
      ;;
    stop)
      check_for_root
      stop
      ;;
    status)
      checkstatus
      RETVAL=$?
      ;;
    restart)
      check_for_root
      restart
      ;;
    condrestart|try-restart)
      check_for_root
      condrestart
      ;;
    *)
      echo $"Usage: $0 {start|stop|status|restart|try-restart|condrestart}"
      exit 1
  esac
}

service "$1"

exit $RETVAL
